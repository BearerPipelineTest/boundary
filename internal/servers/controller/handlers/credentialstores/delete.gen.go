// Code generated by "make handlers"; DO NOT EDIT.
package credentialstores

import (
	"context"

	"github.com/hashicorp/boundary/internal/credential/vault"
	"github.com/hashicorp/boundary/internal/errors"
	pbs "github.com/hashicorp/boundary/internal/gen/controller/api/services"
	"github.com/hashicorp/boundary/internal/types/action"
	"github.com/hashicorp/boundary/internal/servers/controller/handlers"
)

type deleteRequest = *pbs.DeleteCredentialStoreRequest
type deleteResponse = *pbs.DeleteCredentialStoreResponse

// DeleteCredentialStore implements the interface pbs.CredentialLibraryServiceServer.
func (s Service) DeleteCredentialStore(ctx context.Context, req deleteRequest) (deleteResponse, error) {
	if err := validateDeleteRequest(req); err != nil {
		return nil, err
	}
	authResults := s.authResult(ctx, req.GetId(), action.Delete)
	if authResults.Error != nil {
		return nil, authResults.Error
	}
	_, err := s.deleteFromRepo(ctx, authResults.Scope.GetId(), req.GetId())
	if err != nil {
		return nil, err
	}
	return nil, nil
}

func (s Service) deleteFromRepo(ctx context.Context, scopeId, id string) (bool, error) {
	const op = "credentialstores.(Service).deleteFromRepo"
	var rows int
	var err error
	
	repo, iErr := s.repoFn()
	if iErr != nil {
		return false, iErr
	}
	rows, err = repo.DeleteCredentialStore(ctx, scopeId, id)
	
	if err != nil {
		if errors.IsNotFoundError(err) {
			return false, nil
		}
		return false, errors.Wrap(err, op, errors.WithMsg("unable to delete resource"))
	}
	return rows > 0, nil
}

func validateDeleteRequest(req deleteRequest) error {
	return handlers.ValidateDeleteRequest(handlers.NoopValidatorFn, req, vault.CredentialStorePrefix,)
}
